
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package fr.usmb.m1isc.compilation.tp;

import java_cup.runtime.Symbol;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\042\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\005\000\002\003\003\000\002\003\002" +
    "\000\002\004\003\000\002\004\006\000\002\004\006\000" +
    "\002\004\010\000\002\004\007\000\002\004\003\000\002" +
    "\005\004\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\004\000\002\005\004\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\042\002\ufffc\003\023\005\017\012\011\015" +
    "\010\020\ufffc\021\024\022\004\023\025\024\012\025\022" +
    "\026\013\033\007\042\015\044\021\045\005\001\002\000" +
    "\054\002\uffe6\004\uffe6\005\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\013\uffe6\014\uffe6\016\uffe6\017\uffe6\020\uffe6\027\uffe6\030" +
    "\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6\036\uffe6\037\uffe6" +
    "\040\uffe6\041\uffe6\001\002\000\054\002\uffe1\004\uffe1\005" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\013\uffe1\014\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1\034" +
    "\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\001\002" +
    "\000\050\002\ufffb\004\033\005\037\007\040\010\035\011" +
    "\032\013\042\014\027\016\ufffb\017\ufffb\020\ufffb\030\ufffb" +
    "\031\102\032\ufffb\035\034\036\036\037\030\040\041\041" +
    "\031\001\002\000\026\005\017\012\011\015\010\022\004" +
    "\023\025\024\012\025\022\042\015\044\021\045\005\001" +
    "\002\000\040\003\023\005\017\012\011\015\010\016\ufffc" +
    "\021\024\022\004\023\025\024\012\025\022\026\013\033" +
    "\007\042\015\044\021\045\005\001\002\000\026\005\017" +
    "\012\011\015\010\022\004\023\025\024\012\025\022\042" +
    "\015\044\021\045\005\001\002\000\054\002\uffe3\004\uffe3" +
    "\005\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\014\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\037\uffe3\040\uffe3\041\uffe3\001" +
    "\002\000\026\005\017\012\011\015\010\022\004\023\025" +
    "\024\012\025\022\042\015\044\021\045\005\001\002\000" +
    "\004\002\066\001\002\000\054\002\uffe5\004\uffe5\005\uffe5" +
    "\007\uffe5\010\uffe5\011\uffe5\013\uffe5\014\uffe5\016\uffe5\017" +
    "\uffe5\020\uffe5\027\uffe5\030\uffe5\031\uffe5\032\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\001\002\000" +
    "\006\002\uffff\020\065\001\002\000\026\005\017\012\011" +
    "\015\010\022\004\023\025\024\012\025\022\042\015\044" +
    "\021\045\005\001\002\000\012\002\ufffd\016\ufffd\017\062" +
    "\020\ufffd\001\002\000\054\002\uffe4\004\uffe4\005\uffe4\007" +
    "\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\016\uffe4\017\uffe4" +
    "\020\uffe4\027\uffe4\030\uffe4\031\uffe4\032\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\001\002\000\054" +
    "\002\uffe2\004\uffe2\005\uffe2\007\uffe2\010\uffe2\011\uffe2\013" +
    "\uffe2\014\uffe2\016\uffe2\017\uffe2\020\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040" +
    "\uffe2\041\uffe2\001\002\000\016\002\ufff6\016\ufff6\017\ufff6" +
    "\020\ufff6\030\ufff6\032\ufff6\001\002\000\004\045\057\001" +
    "\002\000\026\005\017\012\011\015\010\022\004\023\025" +
    "\024\012\025\022\042\015\044\021\045\005\001\002\000" +
    "\054\002\uffe7\004\033\005\037\007\040\010\035\011\032" +
    "\013\042\014\027\016\uffe7\017\uffe7\020\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\034\uffe7\035\034\036\036\037\030" +
    "\040\041\041\031\001\002\000\026\005\017\012\011\015" +
    "\010\022\004\023\025\024\012\025\022\042\015\044\021" +
    "\045\005\001\002\000\026\005\017\012\011\015\010\022" +
    "\004\023\025\024\012\025\022\042\015\044\021\045\005" +
    "\001\002\000\026\005\017\012\011\015\010\022\004\023" +
    "\025\024\012\025\022\042\015\044\021\045\005\001\002" +
    "\000\026\005\017\012\011\015\010\022\004\023\025\024" +
    "\012\025\022\042\015\044\021\045\005\001\002\000\026" +
    "\005\017\012\011\015\010\022\004\023\025\024\012\025" +
    "\022\042\015\044\021\045\005\001\002\000\026\005\017" +
    "\012\011\015\010\022\004\023\025\024\012\025\022\042" +
    "\015\044\021\045\005\001\002\000\026\005\017\012\011" +
    "\015\010\022\004\023\025\024\012\025\022\042\015\044" +
    "\021\045\005\001\002\000\026\005\017\012\011\015\010" +
    "\022\004\023\025\024\012\025\022\042\015\044\021\045" +
    "\005\001\002\000\026\005\017\012\011\015\010\022\004" +
    "\023\025\024\012\025\022\042\015\044\021\045\005\001" +
    "\002\000\026\005\017\012\011\015\010\022\004\023\025" +
    "\024\012\025\022\042\015\044\021\045\005\001\002\000" +
    "\026\005\017\012\011\015\010\022\004\023\025\024\012" +
    "\025\022\042\015\044\021\045\005\001\002\000\026\005" +
    "\017\012\011\015\010\022\004\023\025\024\012\025\022" +
    "\042\015\044\021\045\005\001\002\000\054\002\ufff3\004" +
    "\033\005\037\007\040\010\035\011\032\013\042\014\027" +
    "\016\ufff3\017\ufff3\020\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\034\ufff3\035\034\036\036\037\030\040\041\041\031" +
    "\001\002\000\044\002\uffef\004\033\005\037\007\040\010" +
    "\035\011\032\013\uffef\014\uffef\016\uffef\017\uffef\020\uffef" +
    "\027\uffef\030\uffef\031\uffef\032\uffef\034\uffef\035\uffef\001" +
    "\002\000\054\002\uffeb\004\uffeb\005\uffeb\007\uffeb\010\uffeb" +
    "\011\uffeb\013\uffeb\014\uffeb\016\uffeb\017\uffeb\020\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\001\002\000\054\002\uffec\004" +
    "\uffec\005\uffec\007\040\010\035\011\032\013\uffec\014\uffec" +
    "\016\uffec\017\uffec\020\uffec\027\uffec\030\uffec\031\uffec\032" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\001\002\000\044\002\ufff1\004\033\005\037\007\040\010" +
    "\035\011\032\013\ufff1\014\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\034\ufff1\035\ufff1\001" +
    "\002\000\054\002\uffea\004\uffea\005\uffea\007\uffea\010\uffea" +
    "\011\uffea\013\uffea\014\uffea\016\uffea\017\uffea\020\uffea\027" +
    "\uffea\030\uffea\031\uffea\032\uffea\034\uffea\035\uffea\036\uffea" +
    "\037\uffea\040\uffea\041\uffea\001\002\000\052\002\ufff2\004" +
    "\033\005\037\007\040\010\035\011\032\013\ufff2\014\ufff2" +
    "\016\ufff2\017\ufff2\020\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\034\ufff2\036\036\037\030\040\041\041\031\001\002" +
    "\000\054\002\uffed\004\uffed\005\uffed\007\040\010\035\011" +
    "\032\013\uffed\014\uffed\016\uffed\017\uffed\020\uffed\027\uffed" +
    "\030\uffed\031\uffed\032\uffed\034\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\001\002\000\054\002\uffe9\004\uffe9" +
    "\005\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\014\uffe9\016" +
    "\uffe9\017\uffe9\020\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\001" +
    "\002\000\044\002\uffee\004\033\005\037\007\040\010\035" +
    "\011\032\013\uffee\014\uffee\016\uffee\017\uffee\020\uffee\027" +
    "\uffee\030\uffee\031\uffee\032\uffee\034\uffee\035\uffee\001\002" +
    "\000\044\002\ufff0\004\033\005\037\007\040\010\035\011" +
    "\032\013\ufff0\014\ufff0\016\ufff0\017\ufff0\020\ufff0\027\ufff0" +
    "\030\ufff0\031\ufff0\032\ufff0\034\ufff0\035\ufff0\001\002\000" +
    "\054\002\ufff4\004\033\005\037\007\040\010\035\011\032" +
    "\013\ufff4\014\027\016\ufff4\017\ufff4\020\ufff4\027\ufff4\030" +
    "\ufff4\031\ufff4\032\ufff4\034\ufff4\035\034\036\036\037\030" +
    "\040\041\041\031\001\002\000\004\035\060\001\002\000" +
    "\026\005\017\012\011\015\010\022\004\023\025\024\012" +
    "\025\022\042\015\044\021\045\005\001\002\000\046\002" +
    "\ufffa\004\033\005\037\007\040\010\035\011\032\013\042" +
    "\014\027\016\ufffa\017\ufffa\020\ufffa\030\ufffa\032\ufffa\035" +
    "\034\036\036\037\030\040\041\041\031\001\002\000\044" +
    "\002\ufffc\003\023\005\017\012\011\015\010\016\ufffc\020" +
    "\ufffc\021\024\022\004\023\025\024\012\025\022\026\013" +
    "\033\007\042\015\044\021\045\005\001\002\000\010\002" +
    "\ufffe\016\ufffe\020\ufffe\001\002\000\054\002\uffe8\004\uffe8" +
    "\005\uffe8\007\uffe8\010\uffe8\011\uffe8\013\uffe8\014\uffe8\016" +
    "\uffe8\017\uffe8\020\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\034\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\001" +
    "\002\000\004\002\001\001\002\000\004\002\000\001\002" +
    "\000\034\004\033\005\037\007\040\010\035\011\032\013" +
    "\042\014\027\027\070\035\034\036\036\037\030\040\041" +
    "\041\031\001\002\000\036\003\023\005\017\012\011\015" +
    "\010\021\024\022\004\023\025\024\012\025\022\026\013" +
    "\033\007\042\015\044\021\045\005\001\002\000\004\030" +
    "\072\001\002\000\036\003\023\005\017\012\011\015\010" +
    "\021\024\022\004\023\025\024\012\025\022\026\013\033" +
    "\007\042\015\044\021\045\005\001\002\000\016\002\ufff8" +
    "\016\ufff8\017\ufff8\020\ufff8\030\ufff8\032\ufff8\001\002\000" +
    "\054\002\ufff5\004\033\005\037\007\040\010\035\011\032" +
    "\013\ufff5\014\ufff5\016\ufff5\017\ufff5\020\ufff5\027\ufff5\030" +
    "\ufff5\031\ufff5\032\ufff5\034\ufff5\035\034\036\036\037\030" +
    "\040\041\041\031\001\002\000\004\016\076\001\002\000" +
    "\054\002\uffe0\004\uffe0\005\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\013\uffe0\014\uffe0\016\uffe0\017\uffe0\020\uffe0\027\uffe0\030" +
    "\uffe0\031\uffe0\032\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\041\uffe0\001\002\000\034\004\033\005\037\007" +
    "\040\010\035\011\032\013\042\014\027\034\100\035\034" +
    "\036\036\037\030\040\041\041\031\001\002\000\036\003" +
    "\023\005\017\012\011\015\010\021\024\022\004\023\025" +
    "\024\012\025\022\026\013\033\007\042\015\044\021\045" +
    "\005\001\002\000\016\002\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\030\ufff9\032\ufff9\001\002\000\036\003\023\005\017\012" +
    "\011\015\010\021\024\022\004\023\025\024\012\025\022" +
    "\026\013\033\007\042\015\044\021\045\005\001\002\000" +
    "\004\032\104\001\002\000\036\003\023\005\017\012\011" +
    "\015\010\021\024\022\004\023\025\024\012\025\022\026" +
    "\013\033\007\042\015\044\021\045\005\001\002\000\016" +
    "\002\ufff7\016\ufff7\017\ufff7\020\ufff7\030\ufff7\032\ufff7\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\103\000\012\002\013\003\015\004\017\005\005\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\076\001\001\000\010\003\074\004\017\005" +
    "\005\001\001\000\004\005\073\001\001\000\002\001\001" +
    "\000\004\005\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\025\001\001\000\002" +
    "\001\001\000\004\005\055\001\001\000\004\005\054\001" +
    "\001\000\004\005\053\001\001\000\004\005\052\001\001" +
    "\000\004\005\051\001\001\000\004\005\050\001\001\000" +
    "\004\005\047\001\001\000\004\005\046\001\001\000\004" +
    "\005\045\001\001\000\004\005\044\001\001\000\004\005" +
    "\043\001\001\000\004\005\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\060" +
    "\001\001\000\002\001\001\000\010\003\062\004\017\005" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\070\005\005\001\001\000\002\001\001\000\006\004\072" +
    "\005\005\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\100\005\005\001\001\000\002\001\001\000\006\004" +
    "\102\005\005\001\001\000\002\001\001\000\006\004\104" +
    "\005\005\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    //    initialisation du parser

    }


    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);     
            if (s != null && s.left >= 0 ) {
                /* Ajoute le numero de ligne  et de colonne*/
                m =  "Ligne " + (s.left+1) + ", Colonne " + (s.right+1) + " : ";
            }
        }
        m = m + message;
        System.err.println(m);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

 
    // pour utilisation dans les actions (classe action)
    // HashMap pour la gestion des variables
    private HashMap<String,Integer> vars = new HashMap<>();
    // gestion des erreurs d'evaluation
    private boolean erreur = false;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= sequence POINT 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= sequence 
            {
              TreeNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode s = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sequence ::= expression SEMI sequence 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode(";",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sequence ::= expression 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sequence ::= 
            {
              TreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sequence",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= expr 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= LET IDENT EGAL expr 
            {
              TreeNode RESULT =null;
		int nomleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nomright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String nom = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("let",new Leaf(new String(nom)), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= WHILE expr DO expression 
            {
              TreeNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode cond = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("while",cond, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= IF expr THEN expression ELSE expression 
            {
              TreeNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TreeNode cond = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode a1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode a2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("if",cond, new TreeNode("then",a1,a2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= expr IFTERN expression ELSETERN expression 
            {
              TreeNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TreeNode cond = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode a1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode a2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("if",cond, new TreeNode("then",a1,a2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= error 
            {
              TreeNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= NOT expr 
            {
              TreeNode RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("not",e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= expr AND expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("and",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expr ::= expr OR expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("or",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expr ::= expr EGAL expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("=",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expr ::= expr GT expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode(">",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= expr GTE expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode(">=",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= expr LT expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("<",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= expr LTE expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("<=",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr PLUS expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("+",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= expr MOINS expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("-",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= expr MUL expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("*",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr DIV expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("/",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MOD expr 
            {
              TreeNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TreeNode e1 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e2 = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("%",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= MOINS expr 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("-",e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= OUTPUT expr 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TreeNode("output",e,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= INPUT 
            {
              TreeNode RESULT =null;
		 RESULT = new Leaf("input"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= NIL 
            {
              TreeNode RESULT =null;
		 RESULT = new Leaf("nil"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= ENTIER 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Leaf(new Integer(n)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= TRUE 
            {
              TreeNode RESULT =null;
		 RESULT = new Leaf(new Integer(1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= FALSE 
            {
              TreeNode RESULT =null;
		 RESULT = new Leaf(new Integer(0)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= IDENT 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Leaf(new String(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= PAR_G sequence PAR_D 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT=e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
