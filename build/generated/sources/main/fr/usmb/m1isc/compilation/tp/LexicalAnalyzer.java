// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: D:/Linux file/github repo/I805_TP34_Lambada/src/main/jflex/AnalyseurLexical.jflex

/* --------------------------Section de Code Utilisateur---------------------*/
package fr.usmb.m1isc.compilation.tp;
import java_cup.runtime.Symbol;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicalAnalyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u0100\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u4200\1\u1f00\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u1f00"+
    "\1\u4f00\1\u5000\1\u5100\1\u1f00\3\u0100\1\u5200\1\u5300\1\u5400"+
    "\12\u1f00\4\u0100\1\u5500\17\u1f00\2\u0100\1\u5600\41\u1f00\2\u0100"+
    "\1\u5700\1\u5800\2\u1f00\1\u5900\1\u5a00\27\u0100\1\u5b00\2\u0100"+
    "\1\u5c00\45\u1f00\1\u0100\1\u5d00\1\u5e00\11\u1f00\1\u5f00\24\u1f00"+
    "\1\u6000\1\u6100\1\u1f00\1\u6200\1\u6300\1\u6400\1\u6500\2\u1f00"+
    "\1\u6600\5\u1f00\1\u6700\1\u6800\1\u6900\5\u1f00\1\u6a00\1\u6b00"+
    "\4\u1f00\1\u6c00\2\u1f00\1\u6d00\16\u1f00\246\u0100\1\u6e00\20\u0100"+
    "\1\u6f00\1\u7000\25\u0100\1\u7100\34\u0100\1\u7200\14\u1f00\2\u0100"+
    "\1\u7300\u0b06\u1f00\1\u7400\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\4\2\22\0\1\1\4\0\1\3\2\0"+
    "\1\4\1\5\1\6\1\7\1\0\1\10\1\11\1\12"+
    "\12\13\1\14\1\15\1\16\1\17\1\20\1\21\1\0"+
    "\1\22\2\23\1\24\1\25\1\26\1\23\1\27\1\30"+
    "\2\23\1\31\1\32\1\33\1\34\1\35\1\23\1\36"+
    "\1\37\1\40\1\41\1\23\1\42\3\23\4\0\1\43"+
    "\1\0\1\44\2\23\1\45\1\46\1\47\1\23\1\50"+
    "\1\51\2\23\1\52\1\53\1\54\1\55\1\56\1\23"+
    "\1\57\1\60\1\61\1\62\1\23\1\63\3\23\12\0"+
    "\1\2\32\0\1\1\11\0\1\23\12\0\1\23\4\0"+
    "\1\23\5\0\27\23\1\0\37\23\1\0\u01ca\23\4\0"+
    "\14\23\16\0\5\23\7\0\1\23\1\0\1\23\21\0"+
    "\160\43\5\23\1\0\2\23\2\0\4\23\1\0\1\23"+
    "\6\0\1\23\1\0\3\23\1\0\1\23\1\0\24\23"+
    "\1\0\123\23\1\0\213\23\1\0\7\43\246\23\1\0"+
    "\46\23\2\0\1\23\6\0\51\23\10\0\55\43\1\0"+
    "\1\43\1\0\2\43\1\0\2\43\1\0\1\43\10\0"+
    "\33\23\4\0\4\23\35\0\13\43\5\0\53\23\37\43"+
    "\4\0\2\23\1\43\143\23\1\0\1\23\7\43\2\0"+
    "\6\43\2\23\2\43\1\0\4\43\2\23\12\43\3\23"+
    "\2\0\1\23\20\0\1\23\1\43\36\23\33\43\2\0"+
    "\131\23\13\43\1\23\16\0\12\43\41\23\11\43\2\23"+
    "\4\0\1\23\2\0\1\43\2\0\26\23\4\43\1\23"+
    "\11\43\1\23\3\43\1\23\5\43\22\0\31\23\3\43"+
    "\4\0\13\23\65\0\25\23\1\0\10\23\25\0\17\43"+
    "\1\0\41\43\66\23\3\43\1\23\22\43\1\23\7\43"+
    "\12\23\2\43\2\0\12\43\1\0\20\23\3\43\1\0"+
    "\10\23\2\0\2\23\2\0\26\23\1\0\7\23\1\0"+
    "\1\23\3\0\4\23\2\0\1\43\1\23\7\43\2\0"+
    "\2\43\2\0\3\43\1\23\10\0\1\43\4\0\2\23"+
    "\1\0\3\23\2\43\2\0\12\43\2\23\12\0\1\23"+
    "\1\0\1\43\2\0\3\43\1\0\6\23\4\0\2\23"+
    "\2\0\26\23\1\0\7\23\1\0\2\23\1\0\2\23"+
    "\1\0\2\23\2\0\1\43\1\0\5\43\4\0\2\43"+
    "\2\0\3\43\3\0\1\43\7\0\4\23\1\0\1\23"+
    "\7\0\14\43\3\23\1\43\13\0\3\43\1\0\11\23"+
    "\1\0\3\23\1\0\26\23\1\0\7\23\1\0\2\23"+
    "\1\0\5\23\2\0\1\43\1\23\10\43\1\0\3\43"+
    "\1\0\3\43\2\0\1\23\17\0\2\23\2\43\2\0"+
    "\12\43\11\0\1\23\6\43\1\0\3\43\1\0\10\23"+
    "\2\0\2\23\2\0\26\23\1\0\7\23\1\0\2\23"+
    "\1\0\5\23\2\0\1\43\1\23\7\43\2\0\2\43"+
    "\2\0\3\43\10\0\2\43\4\0\2\23\1\0\3\23"+
    "\2\43\2\0\12\43\1\0\1\23\20\0\1\43\1\23"+
    "\1\0\6\23\3\0\3\23\1\0\4\23\3\0\2\23"+
    "\1\0\1\23\1\0\2\23\3\0\2\23\3\0\3\23"+
    "\3\0\14\23\4\0\5\43\3\0\3\43\1\0\4\43"+
    "\2\0\1\23\6\0\1\43\16\0\12\43\20\0\5\43"+
    "\10\23\1\0\3\23\1\0\27\23\1\0\20\23\3\0"+
    "\1\23\7\43\1\0\3\43\1\0\4\43\7\0\2\43"+
    "\1\0\3\23\5\0\2\23\2\43\2\0\12\43\20\0"+
    "\1\23\3\43\1\0\10\23\1\0\3\23\1\0\27\23"+
    "\1\0\12\23\1\0\5\23\2\0\1\43\1\23\7\43"+
    "\1\0\3\43\1\0\4\43\7\0\2\43\7\0\1\23"+
    "\1\0\2\23\2\43\2\0\12\43\1\0\2\23\15\0"+
    "\4\43\1\0\10\23\1\0\3\23\1\0\51\23\2\43"+
    "\1\23\7\43\1\0\3\43\1\0\4\43\1\23\5\0"+
    "\3\23\1\43\7\0\3\23\2\43\2\0\12\43\12\0"+
    "\6\23\2\0\2\43\1\0\22\23\3\0\30\23\1\0"+
    "\11\23\1\0\1\23\2\0\7\23\3\0\1\43\4\0"+
    "\6\43\1\0\1\43\1\0\10\43\6\0\12\43\2\0"+
    "\2\43\15\0\60\23\1\43\2\23\7\43\5\0\7\23"+
    "\10\43\1\0\12\43\47\0\2\23\1\0\1\23\1\0"+
    "\5\23\1\0\30\23\1\0\1\23\1\0\12\23\1\43"+
    "\2\23\11\43\1\23\2\0\5\23\1\0\1\23\1\0"+
    "\6\43\2\0\12\43\2\0\4\23\40\0\1\23\27\0"+
    "\2\43\6\0\12\43\13\0\1\43\1\0\1\43\1\0"+
    "\1\43\4\0\2\43\10\23\1\0\44\23\4\0\24\43"+
    "\1\0\2\43\5\23\13\43\1\0\44\43\11\0\1\43"+
    "\71\0\53\23\24\43\1\23\12\43\6\0\6\23\4\43"+
    "\4\23\3\43\1\23\3\43\2\23\7\43\3\23\4\43"+
    "\15\23\14\43\1\23\17\43\2\0\46\23\1\0\1\23"+
    "\5\0\1\23\2\0\53\23\1\0\115\23\1\0\4\23"+
    "\2\0\7\23\1\0\1\23\1\0\4\23\2\0\51\23"+
    "\1\0\4\23\2\0\41\23\1\0\4\23\2\0\7\23"+
    "\1\0\1\23\1\0\4\23\2\0\17\23\1\0\71\23"+
    "\1\0\4\23\2\0\103\23\2\0\3\43\40\0\20\23"+
    "\20\0\126\23\2\0\6\23\3\0\u016c\23\2\0\21\23"+
    "\1\1\32\23\5\0\113\23\3\0\3\43\10\23\7\0"+
    "\15\23\1\0\4\23\3\43\13\0\22\23\3\43\13\0"+
    "\22\23\2\43\14\0\15\23\1\0\3\23\1\0\2\43"+
    "\14\0\64\23\40\43\3\0\1\23\4\0\1\23\1\43"+
    "\2\0\12\43\41\0\3\43\2\0\12\43\6\0\131\23"+
    "\7\0\5\23\2\43\42\23\1\43\1\23\5\0\106\23"+
    "\12\0\37\23\1\0\14\43\4\0\14\43\12\0\12\43"+
    "\36\23\2\0\5\23\13\0\54\23\4\0\32\23\6\0"+
    "\12\43\46\0\27\23\5\43\4\0\65\23\12\43\1\0"+
    "\35\43\2\0\13\43\6\0\12\43\15\0\1\23\10\0"+
    "\17\43\101\0\5\43\57\23\21\43\7\23\4\0\12\43"+
    "\21\0\11\43\14\0\3\43\36\23\15\43\2\23\12\43"+
    "\54\23\16\43\14\0\44\23\24\43\10\0\12\43\3\0"+
    "\3\23\12\43\44\23\2\0\11\23\7\0\53\23\2\0"+
    "\3\23\20\0\3\43\1\0\25\43\4\23\1\43\6\23"+
    "\1\43\2\23\3\43\1\23\5\0\300\23\72\43\1\0"+
    "\5\43\26\23\2\0\6\23\2\0\46\23\2\0\6\23"+
    "\2\0\10\23\1\0\1\23\1\0\1\23\1\0\1\23"+
    "\1\0\37\23\2\0\65\23\1\0\7\23\1\0\1\23"+
    "\3\0\3\23\1\0\7\23\3\0\4\23\2\0\6\23"+
    "\4\0\15\23\5\0\3\23\1\0\7\23\3\0\13\1"+
    "\35\0\2\2\5\0\1\1\17\0\2\43\23\0\1\43"+
    "\12\0\1\1\21\0\1\23\15\0\1\23\20\0\15\23"+
    "\63\0\41\43\21\0\1\23\4\0\1\23\2\0\12\23"+
    "\1\0\1\23\3\0\5\23\6\0\1\23\1\0\1\23"+
    "\1\0\1\23\1\0\4\23\1\0\13\23\2\0\4\23"+
    "\5\0\5\23\4\0\1\23\21\0\43\43\2\23\4\43"+
    "\u022d\0\64\43\26\0\57\23\1\0\57\23\1\0\205\23"+
    "\6\0\4\23\3\43\2\23\14\0\46\23\1\0\1\23"+
    "\5\0\1\23\2\0\70\23\7\0\1\23\17\0\1\43"+
    "\27\23\11\0\7\23\1\0\7\23\1\0\7\23\1\0"+
    "\7\23\1\0\7\23\1\0\7\23\1\0\7\23\1\0"+
    "\7\23\1\0\40\43\57\0\1\23\320\0\1\1\4\0"+
    "\2\23\1\43\31\0\17\43\1\0\5\23\2\0\3\43"+
    "\2\23\4\0\126\23\2\0\2\43\2\0\3\23\1\0"+
    "\132\23\1\0\4\23\5\0\53\23\1\0\136\23\21\0"+
    "\33\23\65\0\306\23\112\0\360\23\20\0\215\23\103\0"+
    "\56\23\2\0\15\23\3\0\20\23\12\43\2\23\24\0"+
    "\57\23\4\43\1\0\12\43\1\0\37\23\2\43\106\23"+
    "\14\43\45\0\11\23\2\0\147\23\2\0\65\23\2\0"+
    "\5\23\60\0\13\23\1\43\3\23\1\43\4\23\1\43"+
    "\27\23\5\43\30\0\64\23\14\0\2\43\62\23\22\43"+
    "\12\0\12\43\6\0\22\43\6\23\3\0\1\23\1\0"+
    "\2\23\13\43\34\23\10\43\2\0\27\23\15\43\14\0"+
    "\35\23\3\0\4\43\57\23\16\43\16\0\1\23\12\43"+
    "\6\0\5\23\1\43\12\23\12\43\5\23\1\0\51\23"+
    "\16\43\11\0\3\23\1\43\10\23\2\43\2\0\12\43"+
    "\6\0\27\23\3\0\1\23\3\43\62\23\1\43\1\23"+
    "\3\43\2\23\2\43\5\23\2\43\1\23\1\43\1\23"+
    "\30\0\3\23\2\0\13\23\5\43\2\0\3\23\2\43"+
    "\12\0\6\23\2\0\6\23\2\0\6\23\11\0\7\23"+
    "\1\0\7\23\1\0\53\23\1\0\14\23\10\0\163\23"+
    "\10\43\1\0\2\43\2\0\12\43\6\0\244\23\14\0"+
    "\27\23\4\0\61\23\4\0\u0100\64\156\23\2\0\152\23"+
    "\46\0\7\23\14\0\5\23\5\0\1\23\1\43\12\23"+
    "\1\0\15\23\1\0\5\23\1\0\1\23\1\0\2\23"+
    "\1\0\2\23\1\0\154\23\41\0\153\23\22\0\100\23"+
    "\2\0\66\23\50\0\14\23\4\0\20\43\20\0\20\43"+
    "\3\0\2\43\30\0\3\43\40\0\5\23\1\0\207\23"+
    "\23\0\12\43\7\0\32\23\4\0\1\43\1\0\32\23"+
    "\13\0\131\23\3\0\6\23\2\0\6\23\2\0\6\23"+
    "\2\0\3\23\43\0\14\23\1\0\32\23\1\0\23\23"+
    "\1\0\2\23\1\0\17\23\2\0\16\23\42\0\173\23"+
    "\105\0\65\43\210\0\1\43\202\0\35\23\3\0\61\23"+
    "\17\0\1\43\37\0\40\23\15\0\24\23\1\43\10\23"+
    "\1\43\5\0\46\23\5\43\5\0\36\23\2\0\44\23"+
    "\4\0\10\23\1\0\5\43\52\0\236\23\2\0\12\43"+
    "\6\0\44\23\4\0\44\23\4\0\50\23\10\0\64\23"+
    "\234\0\67\23\11\0\26\23\12\0\10\23\230\0\6\23"+
    "\2\0\1\23\1\0\54\23\1\0\2\23\3\0\1\23"+
    "\2\0\27\23\12\0\27\23\11\0\37\23\101\0\23\23"+
    "\1\0\2\23\12\0\26\23\12\0\32\23\106\0\70\23"+
    "\6\0\2\23\100\0\1\23\3\43\1\0\2\43\5\0"+
    "\4\43\4\23\1\0\3\23\1\0\35\23\2\0\3\43"+
    "\4\0\1\43\40\0\35\23\3\0\35\23\43\0\10\23"+
    "\1\0\34\23\2\43\31\0\66\23\12\0\26\23\12\0"+
    "\23\23\15\0\22\23\156\0\111\23\67\0\63\23\15\0"+
    "\63\23\15\0\44\23\4\43\10\0\12\43\306\0\35\23"+
    "\12\0\1\23\10\0\26\23\13\43\217\0\27\23\11\0"+
    "\3\43\65\23\17\43\37\0\12\43\17\0\4\43\55\23"+
    "\13\43\25\0\31\23\7\0\12\43\6\0\3\43\44\23"+
    "\16\43\1\0\12\43\4\0\1\23\2\43\11\0\43\23"+
    "\1\43\2\0\1\23\11\0\3\43\60\23\16\43\4\23"+
    "\4\0\4\43\3\0\12\43\1\23\1\0\1\23\43\0"+
    "\22\23\1\0\31\23\14\43\6\0\1\43\101\0\7\23"+
    "\1\0\1\23\1\0\4\23\1\0\17\23\1\0\12\23"+
    "\7\0\57\23\14\43\5\0\12\43\6\0\4\43\1\0"+
    "\10\23\2\0\2\23\2\0\26\23\1\0\7\23\1\0"+
    "\2\23\1\0\5\23\1\0\2\43\1\23\7\43\2\0"+
    "\2\43\2\0\3\43\2\0\1\23\6\0\1\43\5\0"+
    "\5\23\2\43\2\0\7\43\3\0\5\43\213\0\65\23"+
    "\22\43\4\23\5\0\12\43\4\0\1\43\1\23\40\0"+
    "\60\23\24\43\2\23\1\0\1\23\10\0\12\43\246\0"+
    "\57\23\7\43\2\0\11\43\27\0\4\23\2\43\42\0"+
    "\60\23\21\43\3\0\1\23\13\0\12\43\46\0\53\23"+
    "\15\43\1\23\7\0\12\43\66\0\33\23\2\0\17\43"+
    "\4\0\12\43\306\0\54\23\17\43\145\0\100\23\12\43"+
    "\25\0\1\23\240\0\10\23\2\0\47\23\7\43\2\0"+
    "\7\43\1\23\1\0\1\23\1\43\33\0\1\23\12\43"+
    "\50\23\7\43\1\23\4\43\10\0\1\43\10\0\1\23"+
    "\13\43\56\23\20\43\3\0\1\23\42\0\71\23\7\0"+
    "\11\23\1\0\45\23\10\43\1\0\10\43\1\23\17\0"+
    "\12\43\30\0\36\23\2\0\26\43\1\0\16\43\111\0"+
    "\7\23\1\0\2\23\1\0\46\23\6\43\3\0\1\43"+
    "\1\0\2\43\1\0\7\43\1\23\1\43\10\0\12\43"+
    "\6\0\6\23\1\0\2\23\1\0\40\23\5\43\1\0"+
    "\2\43\1\0\5\43\1\23\7\0\12\43\u0136\0\23\23"+
    "\4\43\11\0\232\23\146\0\157\43\21\0\304\23\274\0"+
    "\57\23\321\0\107\23\271\0\71\23\7\0\37\23\1\0"+
    "\12\43\146\0\36\23\2\0\5\43\13\0\60\23\7\43"+
    "\11\0\4\23\14\0\12\43\11\0\25\23\5\0\23\23"+
    "\260\0\100\23\200\0\113\23\4\0\1\43\1\23\67\43"+
    "\7\0\4\43\15\23\100\0\2\23\1\0\1\23\34\0"+
    "\370\23\10\0\363\23\15\0\37\23\61\0\3\23\21\0"+
    "\4\23\10\0\u018c\23\4\0\153\23\5\0\15\23\3\0"+
    "\11\23\7\0\12\23\3\0\2\43\306\0\5\43\3\0"+
    "\6\43\10\0\10\43\2\0\7\43\36\0\4\43\224\0"+
    "\3\43\273\0\125\23\1\0\107\23\1\0\2\23\2\0"+
    "\1\23\2\0\2\23\2\0\4\23\1\0\14\23\1\0"+
    "\1\23\1\0\7\23\1\0\101\23\1\0\4\23\2\0"+
    "\10\23\1\0\7\23\1\0\34\23\1\0\4\23\1\0"+
    "\5\23\1\0\1\23\3\0\7\23\1\0\u0154\23\2\0"+
    "\31\23\1\0\31\23\1\0\37\23\1\0\31\23\1\0"+
    "\37\23\1\0\31\23\1\0\37\23\1\0\31\23\1\0"+
    "\37\23\1\0\31\23\1\0\10\23\2\0\151\43\4\0"+
    "\62\43\10\0\1\43\16\0\1\43\26\0\5\43\1\0"+
    "\17\43\120\0\7\43\1\0\21\43\2\0\7\43\1\0"+
    "\2\43\1\0\5\43\325\0\55\23\3\0\7\43\7\23"+
    "\2\0\12\43\4\0\1\23\u0171\0\54\23\16\43\6\0"+
    "\305\23\13\0\7\43\51\0\104\23\7\43\1\23\4\0"+
    "\12\43\246\0\4\23\1\0\33\23\1\0\2\23\1\0"+
    "\1\23\2\0\1\23\1\0\12\23\1\0\4\23\1\0"+
    "\1\23\1\0\1\23\6\0\1\23\4\0\1\23\1\0"+
    "\1\23\1\0\1\23\1\0\3\23\1\0\2\23\1\0"+
    "\1\23\2\0\1\23\1\0\1\23\1\0\1\23\1\0"+
    "\1\23\1\0\1\23\1\0\2\23\1\0\1\23\2\0"+
    "\4\23\1\0\7\23\1\0\4\23\1\0\4\23\1\0"+
    "\1\23\1\0\12\23\1\0\21\23\5\0\3\23\1\0"+
    "\5\23\1\0\21\23\164\0\32\43\6\0\32\43\6\0"+
    "\32\43\166\0\327\23\51\0\65\23\13\0\336\23\2\0"+
    "\u0182\23\16\0\u0131\23\37\0\36\23\342\0\360\43\20\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29952];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\27\22\1\0\1\23\1\24\1\25\1\22"+
    "\1\26\2\22\1\27\5\22\1\30\20\22\1\0\1\31"+
    "\3\22\1\32\1\3\1\33\1\34\13\22\1\23\1\35"+
    "\3\22\1\36\1\37\5\22\1\40\1\41\1\22\1\42"+
    "\1\22\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\65\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\152\0\237\0\65\0\65\0\324\0\65"+
    "\0\u0109\0\65\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247"+
    "\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef"+
    "\0\u0424\0\u0459\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597"+
    "\0\u05cc\0\u0601\0\u0636\0\65\0\65\0\u066b\0\u0173\0\u06a0"+
    "\0\u06d5\0\u0173\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0173"+
    "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"+
    "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"+
    "\0\u0b63\0\u0173\0\u0b98\0\u0bcd\0\u0c02\0\u0173\0\u0173\0\u0173"+
    "\0\u0173\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75"+
    "\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\65\0\u0173\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0173\0\u0173\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"+
    "\0\u0173\0\u0173\0\u1026\0\u0173\0\u105b\0\u0173";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\24\1\30"+
    "\1\31\1\32\1\33\1\34\3\24\1\35\1\24\1\36"+
    "\1\2\1\37\1\40\1\41\1\42\1\24\1\43\1\44"+
    "\1\45\1\46\1\47\3\24\1\50\1\24\1\51\74\0"+
    "\1\52\3\0\1\53\65\0\1\14\70\0\1\54\64\0"+
    "\1\55\60\0\1\24\6\0\11\24\1\56\30\24\14\0"+
    "\1\24\6\0\42\24\14\0\1\24\6\0\12\24\1\57"+
    "\27\24\14\0\1\24\6\0\7\24\1\60\32\24\14\0"+
    "\1\24\6\0\1\61\41\24\14\0\1\24\6\0\4\24"+
    "\1\62\4\24\1\63\30\24\14\0\1\24\6\0\3\24"+
    "\1\64\36\24\14\0\1\24\6\0\12\24\1\65\27\24"+
    "\14\0\1\24\6\0\6\24\1\66\3\24\1\67\27\24"+
    "\14\0\1\24\6\0\14\24\1\70\2\24\1\71\22\24"+
    "\14\0\1\24\6\0\5\24\1\72\6\24\1\73\25\24"+
    "\14\0\1\24\6\0\5\24\1\74\34\24\14\0\1\24"+
    "\6\0\32\24\1\75\7\24\14\0\1\24\6\0\33\24"+
    "\1\57\6\24\14\0\1\24\6\0\30\24\1\76\11\24"+
    "\14\0\1\24\6\0\22\24\1\77\17\24\14\0\1\24"+
    "\6\0\25\24\1\62\4\24\1\100\7\24\14\0\1\24"+
    "\6\0\24\24\1\101\15\24\14\0\1\24\6\0\33\24"+
    "\1\102\6\24\14\0\1\24\6\0\27\24\1\103\3\24"+
    "\1\104\6\24\14\0\1\24\6\0\35\24\1\70\2\24"+
    "\1\105\1\24\14\0\1\24\6\0\26\24\1\106\6\24"+
    "\1\107\4\24\14\0\1\24\6\0\26\24\1\110\13\24"+
    "\1\0\6\52\1\111\56\52\2\53\1\0\61\53\14\0"+
    "\1\24\6\0\2\24\1\112\37\24\14\0\1\24\6\0"+
    "\15\24\1\113\24\24\14\0\1\24\6\0\7\24\1\114"+
    "\32\24\14\0\1\24\6\0\13\24\1\115\26\24\14\0"+
    "\1\24\6\0\16\24\1\116\23\24\14\0\1\24\6\0"+
    "\2\24\1\117\37\24\14\0\1\24\6\0\7\24\1\120"+
    "\32\24\14\0\1\24\6\0\16\24\1\121\23\24\14\0"+
    "\1\24\6\0\16\24\1\122\23\24\14\0\1\24\6\0"+
    "\3\24\1\123\36\24\14\0\1\24\6\0\17\24\1\124"+
    "\22\24\14\0\1\24\6\0\6\24\1\125\33\24\14\0"+
    "\1\24\6\0\23\24\1\112\16\24\14\0\1\24\6\0"+
    "\36\24\1\126\3\24\14\0\1\24\6\0\30\24\1\127"+
    "\11\24\14\0\1\24\6\0\34\24\1\130\5\24\14\0"+
    "\1\24\6\0\37\24\1\116\2\24\14\0\1\24\6\0"+
    "\23\24\1\117\16\24\14\0\1\24\6\0\30\24\1\120"+
    "\11\24\14\0\1\24\6\0\37\24\1\121\2\24\14\0"+
    "\1\24\6\0\37\24\1\131\2\24\14\0\1\24\6\0"+
    "\24\24\1\132\15\24\14\0\1\24\6\0\40\24\1\133"+
    "\1\24\14\0\1\24\6\0\27\24\1\134\12\24\1\0"+
    "\6\52\1\111\3\52\1\135\52\52\13\0\1\24\6\0"+
    "\3\24\1\136\36\24\14\0\1\24\6\0\15\24\1\137"+
    "\24\24\14\0\1\24\6\0\17\24\1\140\22\24\14\0"+
    "\1\24\6\0\13\24\1\141\26\24\14\0\1\24\6\0"+
    "\11\24\1\142\30\24\14\0\1\24\6\0\3\24\1\143"+
    "\36\24\14\0\1\24\6\0\7\24\1\144\32\24\14\0"+
    "\1\24\6\0\24\24\1\136\15\24\14\0\1\24\6\0"+
    "\36\24\1\145\3\24\14\0\1\24\6\0\40\24\1\146"+
    "\1\24\14\0\1\24\6\0\34\24\1\147\5\24\14\0"+
    "\1\24\6\0\32\24\1\142\7\24\14\0\1\24\6\0"+
    "\24\24\1\143\15\24\14\0\1\24\6\0\30\24\1\150"+
    "\11\24\14\0\1\24\6\0\3\24\1\151\36\24\14\0"+
    "\1\24\6\0\16\24\1\152\23\24\14\0\1\24\6\0"+
    "\17\24\1\153\22\24\14\0\1\24\6\0\3\24\1\154"+
    "\36\24\14\0\1\24\6\0\24\24\1\151\15\24\14\0"+
    "\1\24\6\0\37\24\1\152\2\24\14\0\1\24\6\0"+
    "\40\24\1\155\1\24\14\0\1\24\6\0\24\24\1\154"+
    "\15\24\14\0\1\24\6\0\16\24\1\156\23\24\14\0"+
    "\1\24\6\0\37\24\1\156\2\24\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4240];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\11\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\27\1\1\0\1\1\2\11\33\1\1\0\23\1\1\11"+
    "\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[110];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicalAnalyzer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return new Symbol(sym.ERROR, yyline, yycolumn) ;
            }
            // fall through
          case 36: break;
          case 2:
            { /*espace : pas d'action*/
            }
            // fall through
          case 37: break;
          case 3:
            { return new Symbol(sym.MOD, yyline, yycolumn) ;
            }
            // fall through
          case 38: break;
          case 4:
            { return new Symbol(sym.PAR_G, yyline, yycolumn) ;
            }
            // fall through
          case 39: break;
          case 5:
            { return new Symbol(sym.PAR_D, yyline, yycolumn) ;
            }
            // fall through
          case 40: break;
          case 6:
            { return new Symbol(sym.MUL, yyline, yycolumn) ;
            }
            // fall through
          case 41: break;
          case 7:
            { return new Symbol(sym.PLUS, yyline, yycolumn) ;
            }
            // fall through
          case 42: break;
          case 8:
            { return new Symbol(sym.MOINS, yyline, yycolumn) ;
            }
            // fall through
          case 43: break;
          case 9:
            { return new Symbol(sym.POINT, yyline, yycolumn) ;
            }
            // fall through
          case 44: break;
          case 10:
            { return new Symbol(sym.DIV, yyline, yycolumn) ;
            }
            // fall through
          case 45: break;
          case 11:
            { return new Symbol(sym.ENTIER, yyline, yycolumn, Integer.valueOf(yytext())) ;
            }
            // fall through
          case 46: break;
          case 12:
            { return new Symbol(sym.ELSETERN, yyline, yycolumn) ;
            }
            // fall through
          case 47: break;
          case 13:
            { return new Symbol(sym.SEMI, yyline, yycolumn) ;
            }
            // fall through
          case 48: break;
          case 14:
            { return new Symbol(sym.LT, yyline, yycolumn) ;
            }
            // fall through
          case 49: break;
          case 15:
            { return new Symbol(sym.EGAL, yyline, yycolumn) ;
            }
            // fall through
          case 50: break;
          case 16:
            { return new Symbol(sym.GT, yyline, yycolumn) ;
            }
            // fall through
          case 51: break;
          case 17:
            { return new Symbol(sym.IFTERN, yyline, yycolumn) ;
            }
            // fall through
          case 52: break;
          case 18:
            { return new Symbol(sym.IDENT, yyline, yycolumn, yytext()) ;
            }
            // fall through
          case 53: break;
          case 19:
            { /*commentaire : pas d'action*/
            }
            // fall through
          case 54: break;
          case 20:
            { return new Symbol(sym.LTE, yyline, yycolumn) ;
            }
            // fall through
          case 55: break;
          case 21:
            { return new Symbol(sym.GTE, yyline, yycolumn) ;
            }
            // fall through
          case 56: break;
          case 22:
            { return new Symbol(sym.DO, yyline, yycolumn) ;
            }
            // fall through
          case 57: break;
          case 23:
            { return new Symbol(sym.IF, yyline, yycolumn) ;
            }
            // fall through
          case 58: break;
          case 24:
            { return new Symbol(sym.OR, yyline, yycolumn) ;
            }
            // fall through
          case 59: break;
          case 25:
            { return new Symbol(sym.AND, yyline, yycolumn) ;
            }
            // fall through
          case 60: break;
          case 26:
            { return new Symbol(sym.LET, yyline, yycolumn) ;
            }
            // fall through
          case 61: break;
          case 27:
            { return new Symbol(sym.NIL, yyline, yycolumn) ;
            }
            // fall through
          case 62: break;
          case 28:
            { return new Symbol(sym.NOT, yyline, yycolumn) ;
            }
            // fall through
          case 63: break;
          case 29:
            { return new Symbol(sym.ELSE, yyline, yycolumn) ;
            }
            // fall through
          case 64: break;
          case 30:
            { return new Symbol(sym.THEN, yyline, yycolumn) ;
            }
            // fall through
          case 65: break;
          case 31:
            { return new Symbol(sym.TRUE, yyline, yycolumn) ;
            }
            // fall through
          case 66: break;
          case 32:
            { return new Symbol(sym.FALSE, yyline, yycolumn) ;
            }
            // fall through
          case 67: break;
          case 33:
            { return new Symbol(sym.INPUT, yyline, yycolumn) ;
            }
            // fall through
          case 68: break;
          case 34:
            { return new Symbol(sym.WHILE, yyline, yycolumn) ;
            }
            // fall through
          case 69: break;
          case 35:
            { return new Symbol(sym.OUTPUT, yyline, yycolumn) ;
            }
            // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
